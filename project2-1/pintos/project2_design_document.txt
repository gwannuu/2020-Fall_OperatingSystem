         +--------------------------+
                     |    CS 140    |
         | PROJECT 2: USER PROGRAMS |
         |     DESIGN DOCUMENT      |
         +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

         ARGUMENT PASSING
         ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/* process.c*/
bool check_wcl (int idx, tid_t child_tid)
void insert_wcl (int idx, tid_t child_tid)
void remove_wcl (int idx, tid_t child_tid)
 : manage the mother process's 'waiting child list'. 
check whether mother process is waiting this child or not / insert the child to mother's
'waiting child list' / remove it to mother's waiting child list'.

void insert_cfl_fd (int fd, struct file *file)
void remove_cfl_fd (int fd, structe file *file)
 : insert or remove file descriptor set for a file in 'current file list'.

int search_idx (tid_t tid)
int serach_fds_idx (int idx, int fd)
int search_cfl_idx_fn_filename (const char *fn)
 : search matched set with each function's input.

int search_empty (void)
int serach_fds_empty (int idx)
int search_cfl_empty (void)
 : search the formost blank of each sets. search_empty finds in Process Management Table.



we add the argument cl (command line) to function load and setup_stack
because we should prase the arguments. So file_name is the executable filename and cl is the whole command line which includes file_name. 
---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

In setup_stack () in process.c, I write the args by using memmove() function which is defined in <string.c>. Arguments for setup_stack is two.one is void **esp and second is const char *cl (cmd_line).
From cl, I parse the arguments and write each of them one by one in user stack space.
in kernel space, when syscall called, check and input the argument according to the sycall number in intrrupt frame's esp.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

Because of protection. strtok_r has more safety than strtok ().

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

When executing and loading the process, unix approach is more comfortable because arguments and executable name is already parsed.
Also, Unix can management about the arguments before it goes to kernel.

           SYSTEM CALLS
           ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/* in syscall.c */
void halt (void);
void exit (int status);
pid_t exec (const char *cmd_line);
int wait (pid_t pid);
bool create (const char *file, unsigned initial_size);
bool remove (const char *file);
int open (const char *file);
int filesize (int fd);
int read (int fd, void *buffer, unsigned size);
int write (int fd, const void *buffer, unsigned size);
void seek (int fd, unsigned position);
unsigned tell (int fd);
void close (int fd);
 : handle each system call.

bool check_address (const char *)
 : check whether this address is in user memory or not.

/* File Mapping Table. */
struct file_mapping_table
  {
    int fd;
    int pmt_idx;
    int cfl_idx;
  };
struct file_mapping_table fmt[FMT_SIZE];

  -> If we get fd from syscall, then we can find the process management table index and current file list index.

struct file_descriptor_set
  {
    int fd;
    struct file *file_ptr;
  };
/* Process Management Table. */
struct process_management_table
  {
    bool is_filled;
    tid_t thread_id;              /* process_execute () */
    char name[NAME_SIZE];               /* process_execute () */       
    int ret_val;                  /* exit */
    unsigned short waiting_child_cnt;       /* exit,wait */
    int waiting_child_list[WCL_SIZE];
    bool is_dead;                 /* exit */
    struct thread *parent_thread; /* process_execute () */
    struct file_descriptor_set fds[FDS_SIZE];             /* open,close */
  };
struct process_management_table pmt[PMT_SIZE];

 -> process management table. We record the important information here 
about process.

struct current_file_list
  {
    bool is_filled;
    bool is_opened;
    struct file *file_ptr;
    int fd[FD_SIZE];
    char file_name[NAME_SIZE];            /* open */
  };
struct current_file_list cfl[CFL_SIZE];

-> List of currently using files.



>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

we use the global variable int fd_cnt; in process.h. This variable increments whenever system call open is called. The more open system call is called, increases the file_descriptor which is return value of open call. FD is started from 2 and increses one by one.

---- ALGORITHMS ----

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

When parent process calls wait, then just block parent process. When the child process is exit, child unblocks his parent process who is waiting him.

---- SYNCHRONIZATION ----


---- RATIONALE ----


         SURVEY QUESTIONS
         ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
