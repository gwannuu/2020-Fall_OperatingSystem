         +--------------------------+
                     |    CS 140    |
         | PROJECT 2: USER PROGRAMS |
         |     DESIGN DOCUMENT      |
         +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

         ARGUMENT PASSING
         ================

           SYSTEM CALLS
           ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

  <  process.h  >

#define PMT_SIZE 20
#define FDS_SIZE 10

typedef int pid_t;

/* Number of running process. */
int proc_cnt;
/* Total number of files opened so far. */
int fd_cnt;

/* File Descripter Set. */
struct file_descripter_set
{
  bool is_filled;
  int fd;
  struct file *file_ptr;
};

/* Process Management Table. */
struct process_management_table
{
  bool is_filled;
  tid_t thread_id;
  int ret_val;
  bool is_waiting_child;
  struct thread *parent_thread;
  struct file_descripter_set fds[FDS_SIZE];
};
struct process_management_table pmt[PMT_SIZE];

  <  syscall.h  >

/* system call 1, exit. */
void exit (int);

 ALGORITHMS
---- ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

when the data is inputed from the kernel, it is saved at esp in intr_frame (in this, intr_frame *f). First, f->esp has the system call number and we classified according to <syscall-nh.h>.
When system call needs one variable : argument is in f->esp + 4
When system call needs two variable : arguments are in f->esp+16, f->esp+20
When system call needs three variable : arguments are in f->esp+20. f->esp+24, f->esp+28

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

  First, we find the index of process management table for pid_t pid.
then return process_wait (pid), which is defined in process.c.
Ub oricess_wait (pid), else if (pmt[idx].parent_thread != t) this 
means that the parent of child thread should be same with thread_current ().
Otherwise, the calling child_tid is not son of the callee thread.
if (!pmt[idx].is_waiting_child) check whether parent is waiting child, then block the curernt thread and after the unblock return the 
child's return status. Else, return -1.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

 When calling up the arguments from intr_frame, first check the number of arguments according to syscall and put the value in the corresponding address as the argument value.
In each syscall, if the arguments have a wrong range or value that does not fit with the purpose, return -1 and indicate that is an error case. In other case, call syscall exit immediately to lead to thread_exit.
For example, if the file to create does not exist, we immediately called exit(-1) to make the program end.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?


>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

 If we don't use user memory, there is no way to check whether the kernel is accessing the wrog memory.
So, when we need to manage the memory, we access to user memory and manage the memory space. 

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

  advantages : easy to use. when open called, just use the file descriptor set.
  disadvantages : too many wasted spaces. We initializes the fixed size file descriptor set to 10 for each process.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

Pintos is a one-to-one mapping single threaded process.
So, we don't have to change the default mapping.

         SURVEY QUESTIONS
         ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
