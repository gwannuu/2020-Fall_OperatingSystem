        +---------------------------+
        |         CSE 311           |
        | PROJECT 3: VIRTUAL MEMORY |
        |      DESIGN DOCUMENT      |
        +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>
20181247 gwanwoo choi cgw1999@unist.ac.kr
20181228 yoonyoung junggggg myhjyy@unist.ac.kr
---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

      PAGE TABLE MANAGEMENT
      =====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

<vm/page.h>
enum type
  {
    NORMAL,
    MMAP,
    SWAP
  };

struct vpage              /* virtual page. */
  {
    char name[16];
    struct file *file;
    bool is_load;
    bool writable;
    void *vaddr;
    void *paddr;
    uint32_t page_read_bytes;
    uint32_t page_zero_bytes;
    off_t off;            /* file offset. */
    struct hash_elem h_elem;
    struct list_elem m_elem;
    enum type type;
  };

<threads/thread.h>
struct thread
  {
    /* Owned by thread.c. */
    tid_t tid;                          /* Thread identifier. */       
    enum thread_status status;          /* Thread state. */
    char name[16];                      /* Name (for debugging purposes). */
    uint8_t *stack;                     /* Saved stack pointer. */     
    int priority;                       /* Priority. */
    struct list_elem allelem;           /* List element for all threads list. */

    /* Shared between thread.c and synch.c. */
    struct list_elem elem;              /* List element. */

#ifdef USERPROG
    /* Owned by userprog/process.c. */
    uint32_t *pagedir;                  /* Page directory. */
#endif

    /* Owned by thread.c. */
    unsigned magic;                     /* Detects stack overflow. */  
    struct hash vmhash;
    struct list mmap;
    unsigned short remain_cnt;
    unsigned stack_limit;
//    unsigned page_limit;
  };

new hash table vmhash in thread.h

---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

<vm/frame.h>
struct page
  {
    struct vpage *vpage;
    struct thread *thread;
    struct list_elem list_elem;
  };

struct list p_mem;

p_mem is the physical memory frame.
And this tracks physical memory.

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

When we find the dirty bits of virtual page before swapping to disk,
if dirty bit ==1, then store the file before moving the page to disk.

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

use the lock structure before page allocation.

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

It seems the most reasonable structure. When load time, store the 
informations of page and store it's own thread. Since virtual address
is the concept which is subject to process, It is right that store virtual page in its thread.

           PAGING TO AND FROM DISK
           =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

       MEMORY MAPPED FILES
       ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

<vm/page.h>
struct mmap_entry
  {
    char name[16];
    struct file *file;
    struct list_elem mmap_elem;
    struct list mmap_list;
    mapid_t mapping;
    unsigned short remain_cnt;
  };

<userprog/syscall.h>
typedef int mapid_t;

mapid_t map_cnt;
struct removed_list
  {
    bool is_filled;
    char name[16];
  };
struct removed_list removed_list[5];

<threads/thread.h>
struct list mmap;
unsigned short remain_cnt;

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

I used 'struct vpage'. If i had a request 'mmap', then I use malloc function in mmap() in syscall.c. And I put some informations in vpage
which is made by malloc in mmap(). After that, i push it to thread's
'vmhash' hash table and set the type of vpage to 'MMAP'.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

I use mmap entry. Everytime called mmap(), I put the information of mapid and others to struct mmap_entry and push it to thread's list named 'mmap'. From the thread's list 'mmap', I can detect the mapping overlaps.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

From the point before swap out mmaped page, the implemented code is same as 'demand-paged' and 'swap' cases. But when swapping, we should store the revised mmaped page in the file. Other case, just store page to the swap partition.

         SURVEY QUESTIONS
         ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
